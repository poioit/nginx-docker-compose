server {
    listen 80;
    server_name animeassit.intelligart.com.tw;
    #return 301 https://$host$request_uri;

    resolver 172.17.0.1;
    location / {
	# Check if the connection is an upgrade (i.e., WebSocket)
        set $backend "";
        #if ($http_upgrade = "websocket") {
        #    proxy_pass http://host.docker.internal:3000;
        #}
        #if ($backend = "") {
            #set $backend http://host.docker.internal:3005;
        proxy_pass http://host.docker.internal:3005;
        #}

        # Proxy to the appropriate backend based on connection type

	# WebSocket-specific headers (needed for WebSocket connections)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        # Common headers for all traffic (HTTP and WebSocket)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket-specific timeout settings
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;

    }

    location /api/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://host.docker.internal:3000/api/;
    }

    location /socket.io/ {
        # Proxy WebSocket connections
        proxy_pass http://host.docker.internal:3000/socket.io/;

        # WebSocket headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;

        # Additional headers for WebSocket
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket timeout settings
	proxy_connect_timeout 600s;
        proxy_read_timeout 60m;
        proxy_send_timeout 60m;
 
 	# Optionally, ignore invalid headers (sometimes required for socket.io)
        proxy_ignore_headers X-Accel-Expires Expires Cache-Control;
        proxy_buffering off;	
    }
}



# server {
#     listen 443 ssl;

#     ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#     location / {
#         proxy_pass https://host.docker.internal:3005;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }

#     location /api/ {
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;

#         proxy_pass https://host.docker.internal:3000/api/;
#     }
# }

